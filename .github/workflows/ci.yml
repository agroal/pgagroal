name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

   
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Update system
        run: sudo apt update

      - name: Install Dependencies
        run: |
          sudo apt install -y \
            cmake \
            libev4 libev-dev \
            libsystemd-dev \
            python3-docutils \
            libzstd-dev \
            liblz4-dev \
            libbz2-dev \
            graphviz \
            doxygen \
            clang \
            net-tools \
            pandoc texlive texlive-latex-extra texlive-fonts-extra texlive-xetex \
            texlive-luatex texlive-science texlive-extra-utils

      - name: Install Eisvogel template for Pandoc
        run: |
          wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/2.4.2/Eisvogel-2.4.2.tar.gz
          tar -xzf Eisvogel-2.4.2.tar.gz
          mkdir -p ~/.local/share/pandoc/templates
          mv eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Install PostgreSQL
        run: |
          sudo apt install -y postgresql curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17 postgresql-common postgresql-contrib

      - name: Set Env Path Variable for PostgreSQL
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Start PostgreSQL
        run: |
          sudo systemctl start postgresql || exit 1
          pg_isready -h 127.0.0.1 | grep '5432' || (echo "Nothing is listening on 127.0.0.1:5432" && exit 1)
          pg_isready -h ::1 | grep '5432' || (echo "Nothing is listening on ::1:5432" && exit 1)
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
          PGPASSWORD="postgres" pgbench -i -s 1 -h localhost -p 5432 -U postgres -d postgres

      - name: Define verify functions
        run: |
          echo 'verify_running() {
            echo "Confirming pgagroal is listening on port 2345"
            netstat -tuln | grep "127.0.0.1:2345" || (echo "Nothing is listening on 127.0.0.1:2345" && exit 1)
            netstat -tuln | grep "::1:2345" || (echo "Nothing is listening on ::1:2345" && exit 1)
            echo "[*] Running pgagroal-cli ping"
            ./pgagroal-cli ping
            echo "[*] Running queries with psql"
            PGPASSWORD="postgres" psql -h 127.0.0.1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
            PGPASSWORD="postgres" psql -h ::1 -p 2345 -U postgres -d postgres -c "SELECT * FROM pgbench_accounts LIMIT 50;" > /dev/null
          }

          verify_shutdown() {
            echo "[*] Running pgagroal-cli shutdown immediate"
            ./pgagroal-cli shutdown immediate
            sleep 5
            echo "[*] Confirming there are no dangling pgagroal processes"
            pgrep pgagroal > /dev/null && echo "[E] Dangling pgagroal child processes: $(wc -l < <(pgrep pgagroal))" && exit 1
            echo "rm -f /tmp/pgagroal.2345.pid"
            rm -f /tmp/pgagroal.2345.pid
          }' > /tmp/functions.sh

      - name: Setup pgagroal
        run: |
            sudo mkdir -p /etc/pgagroal  
            sudo cp ./doc/etc/*.conf /etc/pgagroal
            sudo bash -c 'tee /etc/pgagroal/pgagroal.conf > /dev/null <<EOF
            [pgagroal]
            host = *
            port = 2345
        
            log_type = file
            log_level = debug5
            log_path = /tmp/pgagroal.log 
        
            max_connections = 100
            idle_timeout = 600
            validation = off
            unix_socket_dir = /tmp/
        
            [primary]
            host = localhost
            port = 5432
            EOF'
        working-directory: /home/runner/work/pgagroal/pgagroal/
        
      - name: Build Project
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=/usr/bin/gcc
          else
            export CC=/usr/bin/clang
          fi
           
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
           make -j$(nproc)
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Run pgagroal & verify (GCC/Debug or Clang/Debug & Release)
        run: |
          cd build/src
          ./pgagroal -d 
          source /tmp/functions.sh
          verify_running
          verify_shutdown
        working-directory: /home/runner/work/pgagroal/pgagroal/

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path:  /tmp/pgagroal.log 
          retention-days: 90

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: build/doc/ 
          retention-days: 90



      #  build-macos:
      #
      #    runs-on: macos-latest
      #
      #    steps:
      #    - uses: actions/checkout@v3
      #    - name: Install Homebrew
      #      run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      #    - name: Update system
      #      run: brew update
      #    - name: Install openssl
      #      run: brew install openssl
      #    - name: Install libev
      #      run: brew install libev
      #    - name: Install zstd
      #      run: brew install zstd
      #    - name: Install lz4
      #      run: brew install lz4
      #    - name: Install bzip2
      #      run: brew install bzip2
      #    - name: Install rst2man
      #      run: brew install docutils
      #    - name: Install graphviz
      #      run: brew install graphviz
      #    - name: Install doxygen
      #      run: brew install doxygen
      #    - name: Install clang
      #      run: brew install llvm
      #    - name: Install PostgreSQL
      #      run: |
      #        latest_pg=$(brew search postgresql | grep postgresql@ | tail -n 1)
      #        brew install ${latest_pg} || true  # `|| true` prevents install errors from breaking the run
      #    - name: Start postgres
      #      run: |
      #        installed_pg=$(brew search postgresql | grep postgresql@ | tail -n 1)
      #        brew services start ${installed_pg}
      #    - name: GCC/mkdir
      #      run: mkdir build
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/
      #    - name: GCC/cmake
      #      run: export CC=/usr/bin/gcc && export OPENSSL_ROOT_DIR=`brew --prefix openssl` && cmake -DCMAKE_BUILD_TYPE=Debug ..
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/
      #    - name: GCC/make
      #      run: make
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/
      #    - name: GCC/Run pgagroal & confirm pgagroal is running
      #      run: |
      #         sudo mkdir -p /etc/pgagroal
      #         sudo cp ../../doc/etc/*.conf /etc/pgagroal
      #         ./pgagroal >> /dev/null 2>&1 &
      #         pid=$!
      #         sleep 5
      #         ./pgagroal-cli ping
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/src/
      #    - name: GCC/Stop pgagroal & postgres
      #      run: |
      #        ./pgagroal-cli shutdown
      #        installed_pg=$(brew search postgresql | grep postgresql@ | tail -n 1)
      #        brew services stop ${installed_pg}
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/src/
      #    - name: rm -Rf
      #      run: rm -Rf build/
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/
      #    - name: Start postgres
      #      run: |
      #        installed_pg=$(brew search postgresql | grep postgresql@ | tail -n 1)
      #        brew services start ${installed_pg}
      #    - name: CLANG/mkdir
      #      run: mkdir build
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/
      #    - name: CLANG/cmake
      #      run: export CC=/usr/bin/clang && export OPENSSL_ROOT_DIR=`brew --prefix openssl` && cmake -DCMAKE_BUILD_TYPE=Debug ..
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/
      #    - name: CLANG/make
      #      run: make
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/
      #    - name: CLANG/Run pgagroal & confirm pgagroal is running
      #      run: |
      #        sudo mkdir -p /etc/pgagroal
      #        sudo cp ../../doc/etc/*.conf /etc/pgagroal
      #        ./pgagroal >> /dev/null 2>&1 &
      #        pid=$!
      #        sleep 5
      #        ./pgagroal-cli ping
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/src/
      #    - name: CLANG/Stop pgagroal & postgres
      #      run: |
      #        ./pgagroal-cli shutdown
      #        installed_pg=$(brew search postgresql | grep postgresql@ | tail -n 1)
      #        brew services stop ${installed_pg}
      #      working-directory: /Users/runner/work/pgagroal/pgagroal/build/src/
